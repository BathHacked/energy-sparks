require 'rails_helper'

describe Amr::DataFeedTranslator do

  let(:sheffield_config) { build(:amr_data_feed_config,
      description: 'Sheffield',
      date_format: "%d/%m/%Y",
      mpan_mprn_field: 'MPAN',
      units_field: 'units',
      reading_date_field: 'ConsumptionDate',
      reading_fields:   "kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48".split(','),
      meter_description_field: 'siteRef',
      header_example: "siteRef,MPAN,ConsumptionDate,units,kWh_1,kWh_2,kWh_3,kWh_4,kWh_5,kWh_6,kWh_7,kWh_8,kWh_9,kWh_10,kWh_11,kWh_12,kWh_13,kWh_14,kWh_15,kWh_16,kWh_17,kWh_18,kWh_19,kWh_20,kWh_21,kWh_22,kWh_23,kWh_24,kWh_25,kWh_26,kWh_27,kWh_28,kWh_29,kWh_30,kWh_31,kWh_32,kWh_33,kWh_34,kWh_35,kWh_36,kWh_37,kWh_38,kWh_39,kWh_40,kWh_41,kWh_42,kWh_43,kWh_44,kWh_45,kWh_46,kWh_47,kWh_48,kVArh_1,kVArh_2,kVArh_3,kVArh_4,kVArh_5,kVArh_6,kVArh_7,kVArh_8,kVArh_9,kVArh_10,kVArh_11,kVArh_12,kVArh_13,kVArh_14,kVArh_15,kVArh_16,kVArh_17,kVArh_18,kVArh_19,kVArh_20,kVArh_21,kVArh_22,kVArh_23,kVArh_24,kVArh_25,kVArh_26,kVArh_27,kVArh_28,kVArh_29,kVArh_30,kVArh_31,kVArh_32,kVArh_33,kVArh_34,kVArh_35,kVArh_36,kVArh_37,kVArh_38,kVArh_39,kVArh_40,kVArh_41,kVArh_42,kVArh_43,kVArh_44,kVArh_45,kVArh_46,kVArh_47,kVArh_48"
    )
  }

  it 'converts array rows to a keyed hash' do

    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'kwh','1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    result = Amr::DataFeedTranslator.new(sheffield_config, readings).perform.first

    expect(result[:mpan_mprn]).to eq('2333300681718')
    expect(result[:reading_date]).to eq('31/12/2019')
    expect(result[:description]).to eq('MEERSBROOK PRIMARY - M1')
    expect(result[:readings].first).to eq('1.20800000')
    expect(result[:readings].last).to eq('1.17700000')
  end

  it 'removes rows that do not match the expected_units' do
    sheffield_config.expected_units = 'kwh'
    readings = [
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'kwh','1.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
      ['MEERSBROOK PRIMARY - M1', '2333300681718', '31/12/2019', 'LEAD','2.20800000', '1.16100000', '1.19500000', '1.21000000', '1.16600000', '1.20100000', '1.17800000', '1.30000000', '1.30100000', '1.26600000', '1.27300000', '1.28000000', '2.10900000', '2.03700000', '1.29100000', '1.24600000', '1.67800000', '1.24500000', '1.12800000', '1.11300000', '1.35000000', '1.11700000', '1.14200000', '1.40600000', '1.10100000', '1.12300000', '1.16400000', '1.42700000', '1.12900000', '1.10400000', '1.11900000', '1.46600000', '1.18400000', '1.14600000', '1.22600000', '1.20800000', '1.25500000', '1.20000000', '1.23600000', '1.16300000', '1.12400000', '1.19800000', '1.12800000', '1.15500000', '1.13000000', '1.18200000', '1.14500000', '1.17700000', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    ]

    results = Amr::DataFeedTranslator.new(sheffield_config, readings).perform

    expect(results.size).to eq(1)
    expect(results.first[:readings].first).to eq('1.20800000')
  end

end
