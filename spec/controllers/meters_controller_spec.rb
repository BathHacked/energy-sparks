require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MetersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Meter. As you add validations to Meter, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { meter_no: 1234567, meter_type: :gas }
  }

  let(:invalid_attributes) {
    { meter_no: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MetersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "As an admin user" do
    before(:each) do
      sign_in_user(:admin)
    end
    describe "GET #index" do
      it "assigns all meters as @meters" do
        meter = Meter.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:meters)).to eq([meter])
      end
    end

    describe "GET #show" do
      it "assigns the requested meter as @meter" do
        meter = Meter.create! valid_attributes
        get :show, params: {id: meter.to_param}, session: valid_session
        expect(assigns(:meter)).to eq(meter)
      end
    end

    describe "GET #new" do
      it "assigns a new meter as @meter" do
        get :new, params: {}, session: valid_session
        expect(assigns(:meter)).to be_a_new(Meter)
      end
    end

    describe "GET #edit" do
      it "assigns the requested meter as @meter" do
        meter = Meter.create! valid_attributes
        get :edit, params: {id: meter.to_param}, session: valid_session
        expect(assigns(:meter)).to eq(meter)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Meter" do
          expect {
            post :create, params: {meter: valid_attributes}, session: valid_session
          }.to change(Meter, :count).by(1)
        end

        it "assigns a newly created meter as @meter" do
          post :create, params: {meter: valid_attributes}, session: valid_session
          expect(assigns(:meter)).to be_a(Meter)
          expect(assigns(:meter)).to be_persisted
        end

        it "redirects to the created meter" do
          post :create, params: {meter: valid_attributes}, session: valid_session
          expect(response).to redirect_to(Meter.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved meter as @meter" do
          post :create, params: {meter: invalid_attributes}, session: valid_session
          expect(assigns(:meter)).to be_a_new(Meter)
        end

        it "re-renders the 'new' template" do
          post :create, params: {meter: invalid_attributes}, session: valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let!(:new_school) { FactoryGirl.create :school }
        let(:new_attributes) {
          { meter_no: 12345, meter_type: :electricity, school_id: new_school.id }
        }

        it "updates the requested meter" do
          meter = Meter.create! valid_attributes
          put :update, params: {id: meter.to_param, meter: new_attributes}, session: valid_session
          meter.reload
          expect(meter.meter_no).to eq new_attributes[:meter_no]
          expect(meter.meter_type).to eq new_attributes[:meter_type].to_s
          expect(meter.school_id).to eq new_attributes[:school_id]
        end

        it "assigns the requested meter as @meter" do
          meter = Meter.create! valid_attributes
          put :update, params: {id: meter.to_param, meter: valid_attributes}, session: valid_session
          expect(assigns(:meter)).to eq(meter)
        end

        it "redirects to the meter" do
          meter = Meter.create! valid_attributes
          put :update, params: {id: meter.to_param, meter: valid_attributes}, session: valid_session
          expect(response).to redirect_to(meter)
        end
      end

      context "with invalid params" do
        it "assigns the meter as @meter" do
          meter = Meter.create! valid_attributes
          put :update, params: {id: meter.to_param, meter: invalid_attributes}, session: valid_session
          expect(assigns(:meter)).to eq(meter)
        end

        it "re-renders the 'edit' template" do
          meter = Meter.create! valid_attributes
          put :update, params: {id: meter.to_param, meter: invalid_attributes}, session: valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested meter" do
        meter = Meter.create! valid_attributes
        expect {
          delete :destroy, params: {id: meter.to_param}, session: valid_session
        }.to change(Meter, :count).by(-1)
      end

      it "redirects to the meters list" do
        meter = Meter.create! valid_attributes
        delete :destroy, params: {id: meter.to_param}, session: valid_session
        expect(response).to redirect_to(meters_url)
      end
    end
  end
end
